From e4827b07e9d4c69fcac9bb465ccacb3453bad979 Mon Sep 17 00:00:00 2001
From: vansung.pham <vansung.pham@lgepartner.com>
Date: Tue, 05 Sep 2023 18:25:07 +0900
Subject: [PATCH] Fix coverity issue 9526297,9167778,9167764

:Release Notes:
Fix coverity issue

:Detailed Notes:
Fix coverity issue 9526297,9167778,9167764

:Testing Performed:
N/A

Results:
N/A

:QA Notes:
N/A

:Issues Addressed:
http://webos-coverity.lge.com:5050/#/project-view/31168/10161?selectedIssue=9526297
http://webos-coverity.lge.com:5050/#/project-view/31168/10161?selectedIssue=9167778
http://webos-coverity.lge.com:5050/#/project-view/31168/10161?selectedIssue=9167764

Change-Id: I0995ed040894a380cfedd3de81c6a1c9c09c2706

---
Upstream-Status: Pending

diff --git a/src/pbnjson_c/debugging.c b/src/pbnjson_c/debugging.c
index 936273c..d384a38 100644
--- a/src/pbnjson_c/debugging.c
+++ b/src/pbnjson_c/debugging.c
@@ -159,7 +159,15 @@
 	// TODO: memoize the program name string length
 	size_t messageLen = strlen(message) + strlen(path) + 4 /* line number */ + 100 /* chars for message */;
 	const char *programNameToPrint = getConsumerName_internal();
-	size_t formatLen = messageLen + sizeof(LOG_PREAMBLE) + (using_terminal ? 1 : 0) + strlen(programNameToPrint);
+	size_t formatLen = 0;
+	if(programNameToPrint != NULL)
+	{
+		formatLen = messageLen + sizeof(LOG_PREAMBLE) + (using_terminal ? 1 : 0) + strlen(programNameToPrint);	
+	}
+	else
+	{
+		formatLen = messageLen + sizeof(LOG_PREAMBLE) + (using_terminal ? 1 : 0) ;
+	}
 	char format[formatLen];
 	snprintf(format, formatLen, LOG_PREAMBLE "%s%s", programNameToPrint, path, line, message, using_terminal ? "\n" : "");
 
diff --git a/src/pbnjson_c/validation/object_validator.c b/src/pbnjson_c/validation/object_validator.c
index a26f23c..0240a71 100644
--- a/src/pbnjson_c/validation/object_validator.c
+++ b/src/pbnjson_c/validation/object_validator.c
@@ -56,6 +56,7 @@
 {
 	ObjectValidator *vobj = (ObjectValidator *) v;
 	MyContext *my_ctxt = (MyContext *) validation_state_get_context(s);
+	assert(my_ctxt);
 	if (!my_ctxt->has_started)
 	{
 		if (e->type != EV_OBJ_START)
diff --git a/src/pbnjson_cxx/JParser.cpp b/src/pbnjson_cxx/JParser.cpp
index 58e0f74..716adbd 100644
--- a/src/pbnjson_cxx/JParser.cpp
+++ b/src/pbnjson_cxx/JParser.cpp
@@ -22,6 +22,7 @@
 #include <JSchemaResolverWrapper.h>
 #include "liblog.h"
 #include "../pbnjson_c/jparse_stream_internal.h"
+#include <jobject.h>
 
 namespace pbnjson {
 
@@ -77,6 +78,9 @@
 	return SaxBounce::s(static_cast<JParser *>(jsax_getContext(ctxt)), std::string(str, len));
 }
 
+static bool jis_valid_unsafe (jvalue_ref val)
+{ return val != jinvalid() && val != NULL; }
+
 static int __number(JSAXContextRef ctxt, const char *number, size_t len)
 {
 	JParser *p = static_cast<JParser *>(jsax_getContext(ctxt));
@@ -89,7 +93,10 @@
 			int64_t asInteger;
 			double asFloat;
 			ConversionResultFlags toFloatErrors;
-
+			if(!jis_valid_unsafe(toConv))
+			{
+				return 0;
+			}
 			if (CONV_OK == jnumber_get_i64(toConv, &asInteger)) {
 				j_release(&toConv);
 				return SaxBounce::n(p, (asInteger));
