From 6a7ed2c0838217543505b3e610dafa441f141723 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Wilken=20D=C3=B6rrie?= <jdoerrie@chromium.org>
Date: Fri, 2 Jun 2023 17:15:58 +0000
Subject: [PATCH] Ensure CheckedContiguousIterator satisfies C++20 Concept

This change ensures base::CheckedContiguousIterator satisfies the
C++20 concept `std::contiguous_iterator`. In order to do so, this change
also adds `iterator operator+(difference_type, iterator)`, which is a
requirement of the `std::randon_access_iterator` concept:
https://en.cppreference.com/w/cpp/iterator/random_access_iterator

Bug: 1449299
Change-Id: Id78fb2b00cd955189d25b0dfd9ff0a11dde0845f
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4580749
Reviewed-by: Daniel Cheng <dcheng@chromium.org>
Commit-Queue: Daniel Cheng <dcheng@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1152610}
---
Upstream-Status: Backport [116.0.5809.0 https://chromium-review.googlesource.com/c/chromium/src/+/4580749 AND Submitted http://gpro.lge.com/c/webosose/chromium108/+/373313 Ensure CheckedContiguousIterator satisfies C++20 Concept]

 src/base/containers/checked_iterators.h           | 8 +++++++-
 src/base/containers/checked_iterators_unittest.cc | 6 ++++++
 src/base/containers/span_unittest.cc              | 3 +++
 3 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/src/base/containers/checked_iterators.h b/src/base/containers/checked_iterators.h
index eb3ccab335..caf567d7bb 100644
--- a/src/base/containers/checked_iterators.h
+++ b/src/base/containers/checked_iterators.h
@@ -23,7 +23,7 @@ class CheckedContiguousIterator {
   using pointer = T*;
   using reference = T&;
   using iterator_category = std::random_access_iterator_tag;
-#if __cplusplus >= 202002L
+#if defined(__cpp_lib_ranges)
   using iterator_concept = std::contiguous_iterator_tag;
 #endif
 
@@ -147,6 +147,12 @@ class CheckedContiguousIterator {
     return it;
   }
 
+  constexpr friend CheckedContiguousIterator operator+(
+      difference_type lhs,
+      const CheckedContiguousIterator& rhs) {
+    return rhs + lhs;
+  }
+
   constexpr CheckedContiguousIterator& operator-=(difference_type rhs) {
     if (rhs < 0) {
       CHECK_LE(-rhs, end_ - current_);
diff --git a/src/base/containers/checked_iterators_unittest.cc b/src/base/containers/checked_iterators_unittest.cc
index 55894262d5..71d01a2015 100644
--- a/src/base/containers/checked_iterators_unittest.cc
+++ b/src/base/containers/checked_iterators_unittest.cc
@@ -13,6 +13,12 @@
 
 namespace base {
 
+#if defined(__cpp_lib_ranges)
+TEST(CheckedContiguousIterator, SatisfiesContiguousIteratorConcept) {
+  static_assert(std::contiguous_iterator<CheckedContiguousIterator<int>>);
+}
+#endif
+
 // Checks that constexpr CheckedContiguousConstIterators can be compared at
 // compile time.
 TEST(CheckedContiguousIterator, StaticComparisonOperators) {
diff --git a/src/base/containers/span_unittest.cc b/src/base/containers/span_unittest.cc
index 1bc3db6eb6..02e875db6b 100644
--- a/src/base/containers/span_unittest.cc
+++ b/src/base/containers/span_unittest.cc
@@ -1085,6 +1085,9 @@ TEST(SpanTest, ConstexprIterator) {
 
   static_assert(1 == *((span.begin() + 1) -= 1), "");
   static_assert(6 == *((span.begin() + 1) -= 0), "");
+
+  static_assert(0 + span.begin() == span.begin() + 0);
+  static_assert(1 + span.begin() == span.begin() + 1);
 }
 
 TEST(SpanTest, ReverseIterator) {
