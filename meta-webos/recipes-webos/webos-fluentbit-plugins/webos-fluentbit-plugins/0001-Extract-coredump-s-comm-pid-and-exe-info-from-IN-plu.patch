From d46d3f7ecd9ae0b9a14c29f10d1461d1c2454359 Mon Sep 17 00:00:00 2001
From: Myungchul Kim <myungchul.kim@lge.com>
Date: Fri, 28 Oct 2022 15:46:39 +0900
Subject: [PATCH] Extract coredump's comm, pid and exe info from IN plugin

:Release Notes:
Extract coredump's comm, pid and exe info from IN plugin

:Detailed Notes:
As a crash-related input plugin (in_crashd) is newly created,
update the existing out_jira & out_crashinfo plugins to work
with new plugin.
In addition, Move 'parseCoredumpComm' and 'getCrashedFunction'
functions from out_jira to in_crashinfo.

:Testing Performed:
Local test : OK
See the CCC jira ticket

:QA Notes:
N/A

:Issues Addressed:
[WRO-14390] fluentbit: Add in_crashd plugin for jira reporting

Change-Id: I0703a9d33500d0d926fdfbc83c4da9a05cbd8ea4
---
 plugins/in_crashinfo/CrashinfoHandler.cpp  | 224 +++++++++++++++++++--
 plugins/in_crashinfo/CrashinfoHandler.h    |   4 +
 plugins/out_crashinfo/CrashinfoHandler.cpp |  22 +-
 plugins/out_jira/JiraHandler.cpp           | 198 ++----------------
 plugins/out_jira/JiraHandler.h             |   1 -
 python3-webos/webos_issue.py               |   2 +-
 6 files changed, 249 insertions(+), 202 deletions(-)

diff --git a/plugins/in_crashinfo/CrashinfoHandler.cpp b/plugins/in_crashinfo/CrashinfoHandler.cpp
index 9bbe92a..e1d3017 100644
--- a/plugins/in_crashinfo/CrashinfoHandler.cpp
+++ b/plugins/in_crashinfo/CrashinfoHandler.cpp
@@ -19,13 +19,16 @@
 #include <fcntl.h>
 #include <fstream>
 #include <limits.h>
+#include <regex>
 #include <stdio.h>
 #include <stdlib.h>
 #include <sys/inotify.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <sys/xattr.h>
 #include <vector>
 
+#include "Environment.h"
 #include "util/File.h"
 #include "util/Logger.h"
 #include "util/MSGPackUtil.h"
@@ -33,7 +36,9 @@
 #define PATH_COREDUMP_DIRECTORY "/var/lib/systemd/coredump"
 
 #define KEY_SUMMARY             "summary"
-#define KEY_COMM_PID            "comm.pid"
+#define KEY_COMM                "comm"
+#define KEY_EXE                 "exe"
+#define KEY_PID                 "pid"
 #define KEY_COREDUMP            "coredump"
 #define KEY_CRASHREPORT         "crashreport"
 #define KEY_JOURNALS            "journals"
@@ -98,6 +103,9 @@ int InCrashinfoHandler::onInit(struct flb_input_instance *ins, struct flb_config
 
     const char *pval = NULL;
 
+    initDistroInfo();
+    PLUGIN_INFO("Distro : (%s)", m_distro.c_str());
+
     /* Allocate space for the configuration */
     ctx = (struct flb_in_coredump_config*)flb_malloc(sizeof(struct flb_in_coredump_config));
     if (!ctx)
@@ -202,6 +210,9 @@ int InCrashinfoHandler::onCollect(struct flb_input_instance *ins, struct flb_con
 
     msgpack_packer mp_pck;
     msgpack_sbuffer mp_sbuf;
+    string comm;
+    string exe;
+    string pid;
 
     ctx->buf_start = 0;
     ctx->buf_len = read(ctx->fd, ctx->buf, sizeof(ctx->buf) - 1);
@@ -246,6 +257,10 @@ int InCrashinfoHandler::onCollect(struct flb_input_instance *ins, struct flb_con
             PLUGIN_ERROR("Not coredump file");
             continue;
         }
+        if (parseCoredumpComm(coredumpFullpath.c_str(), comm, pid, exe) == -1) {
+            PLUGIN_ERROR("Fail to parse coredump file");
+            continue;
+        }
 
         list<string> crashEntries;
         if (!File::listFiles(m_workDir, crashEntries)) {
@@ -274,14 +289,14 @@ int InCrashinfoHandler::onCollect(struct flb_input_instance *ins, struct flb_con
             }
         }
 
-        vector<string> splitted = split(coredumpFilename, '.');
-        if (splitted.size() != 7) {
-            // core.<comm>.<uid>.<bootid>.<pid>.<timestamp>.zst
-            PLUGIN_ERROR("Filename format error: %s", coredumpFilename.c_str());
-            continue;
-        }
-        string commPid = splitted[1] + "." + splitted[4];
-        string crashdir = File::join(m_workDir, commPid);
+        // vector<string> splitted = split(coredumpFilename, '.');
+        // if (splitted.size() != 7) {
+        //    // core.<comm>.<uid>.<bootid>.<pid>.<timestamp>.zst
+        //     PLUGIN_ERROR("Filename format error: %s", coredumpFilename.c_str());
+        //     continue;
+        // }
+        // string commPid = splitted[1] + "." + splitted[4]; // splitted[1]: comm, splitted[4]: pid
+        string crashdir = File::join(m_workDir, comm + "." + pid);
         if (!File::createDir(crashdir)) {
             PLUGIN_ERROR("Failed to create dir: %s: %s", crashdir.c_str(), strerror(errno));
             continue;
@@ -337,11 +352,18 @@ int InCrashinfoHandler::onCollect(struct flb_input_instance *ins, struct flb_con
         // Guarantee crashreport file closing time
         sleep(1);
 
+        string crashedFunc;
+        if (!getCrashedFunction(crashreportFullpath, comm, crashedFunc)) {
+            PLUGIN_WARN("Failed to find crashed function");
+            crashedFunc = "";
+        }
+        string summary = "[RDX_CRASH][" + m_distro + "] " + exe + " " + crashedFunc;
+
         msgpack_pack_array(&mp_pck, 2); // time | value
         flb_pack_time_now(&mp_pck);
 
-        // 4~7 pairs
-        int childrenSize = 4;
+        // 7~10 pairs
+        int childrenSize = 7;
         if (access(coredumpFullpath.c_str(), F_OK) == 0)
             childrenSize++;
         if (access(messagesFullpath.c_str(), F_OK) == 0)
@@ -351,7 +373,10 @@ int InCrashinfoHandler::onCollect(struct flb_input_instance *ins, struct flb_con
         msgpack_pack_map(&mp_pck, childrenSize);
 
         // com.pid, coredump, crashreport, journals, messages, screenshot and sysinfo.
-        MSGPackUtil::putValue(&mp_pck, KEY_COMM_PID, commPid);
+        MSGPackUtil::putValue(&mp_pck, KEY_COMM, comm);
+        MSGPackUtil::putValue(&mp_pck, KEY_EXE, exe);
+        MSGPackUtil::putValue(&mp_pck, KEY_PID, pid);
+        MSGPackUtil::putValue(&mp_pck, KEY_SUMMARY, summary);
         if (access(coredumpFullpath.c_str(), F_OK) == 0)
             MSGPackUtil::putValue(&mp_pck, KEY_COREDUMP, coredumpFullpath);
         MSGPackUtil::putValue(&mp_pck, KEY_CRASHREPORT, crashreportFullpath);
@@ -370,6 +395,19 @@ int InCrashinfoHandler::onCollect(struct flb_input_instance *ins, struct flb_con
     return 0;
 }
 
+void InCrashinfoHandler::initDistroInfo()
+{
+    int cnt = 0;
+
+    m_distro = "";
+    for (int i=0; i < strlen(WEBOS_TARGET_DISTRO); i++) {
+        if (*(WEBOS_TARGET_DISTRO+i) == '-')
+            continue;
+
+        m_distro += *(WEBOS_TARGET_DISTRO+i);
+    }
+}
+
 int InCrashinfoHandler::verifyCoredumpFile(const char *corefile)
 {
     int len = strlen(corefile);
@@ -383,6 +421,168 @@ int InCrashinfoHandler::verifyCoredumpFile(const char *corefile)
     return 0;
 }
 
+int InCrashinfoHandler::parseCoredumpComm(const string& coredump, string& comm, string& pid, string& exe)
+{
+    // template : core | comm | uid | boot id | pid | timestamp
+    // example  : core.coreexam.0.5999de4a29fb442eb75fb52f8eb64d20.1476.1615253999000000.xz
+
+    ssize_t buflen, keylen, vallen;
+    char exe_str[STR_LEN];
+    char *buf, *key, *val;
+
+    PLUGIN_INFO("Full param : (%s)", coredump.c_str());
+
+    // Determine the length of the buffer needed.
+    buflen = listxattr(coredump.c_str(), NULL, 0);
+    if (buflen == -1) {
+        PLUGIN_ERROR("Failed listxattr");
+        return -1;
+    }
+    if (buflen == 0) {
+        PLUGIN_ERROR("No attributes");
+        return -1;
+    }
+
+    // Allocate the buffer.
+    buf = (char*)malloc(buflen);
+    if (buf == NULL) {
+        PLUGIN_ERROR("Failed malloc");
+        return -1;
+    }
+
+    // Copy the list of attribute keys to the buffer
+    buflen = listxattr(coredump.c_str(), buf, buflen);
+    PLUGIN_DEBUG("buflen : (%d)", buflen);
+
+    if (buflen == -1) {
+        return -1;
+    } else if (buflen == 0) {
+        PLUGIN_ERROR("No attributes full : (%s)", coredump.c_str());
+        return -1;
+    }
+
+    key = buf;
+    while (0 < buflen) {
+
+        // Output attribute key
+        PLUGIN_DEBUG("key : (%s)", key);
+
+        // Determine length of the value
+        vallen = getxattr(coredump.c_str(), key, NULL, 0);
+
+        if (vallen == -1) {
+            PLUGIN_ERROR("Failed getxattr");
+        } else if (vallen == 0) {
+            PLUGIN_ERROR("No value");
+        } else {
+            val = (char*)malloc(vallen + 1);
+            if (val == NULL) {
+                PLUGIN_ERROR("Failed malloc");
+                free(buf);
+                return -1;
+            }
+
+            // Copy value to buffer
+            vallen = getxattr(coredump.c_str(), key, val, vallen);
+            if (vallen == -1) {
+                PLUGIN_ERROR("Failed getxattr");
+            } else {
+                // Check attribute value (exe, pid)
+                val[vallen] = 0;
+                PLUGIN_DEBUG("val : (%s)", val);
+
+                if (strstr(key, "pid") != NULL)
+                    pid = val;
+                if (strstr(key, "exe") != NULL)
+                    exe = val;
+            }
+            free(val);
+        }
+
+        // Forward to next attribute key.
+        keylen = strlen(key) + 1;
+        buflen -= keylen;
+        key += keylen;
+    }
+    free(buf);
+
+    strncpy(exe_str, exe.c_str(), STR_LEN);
+    exe_str[STR_LEN-1] = '\0';
+
+    char *ptr = strtok(exe_str, "/");
+    while (ptr != NULL)
+    {
+        PLUGIN_DEBUG("ptr : (%s)", ptr);
+        if (strcmp(ptr, "usr") != 0 && strcmp(ptr, "bin") != 0 && strcmp(ptr, "sbin") != 0) {
+            comm = ptr;
+            break;
+        }
+        ptr = strtok(NULL, "/");
+    }
+
+    return 0;
+}
+
+bool InCrashinfoHandler::getCrashedFunction(const string& crashreport, const string& comm, string& func)
+{
+    // A crashreport contains the following stacktrace.
+    // The first line here isn't really helpful: __libc_do_syscall (libc.so.6 + 0x1ade6)
+    // So here try to fina a meaningful line: _Z5funcCv (coredump_example + 0xb6e)
+    // ...
+    // Found module coredump_example with build-id: 331c2591ed23996f271990c41f3775874eff0ba7
+    // Stack trace of thread 13609:
+    //   #0  0x00000000f7508de6 __libc_do_syscall (libc.so.6 + 0x1ade6)
+    //   #1  0x00000000f7517416 __libc_signal_restore_set (libc.so.6 + 0x29416)
+    //   #2  0x00000000f7508922 __GI_abort (libc.so.6 + 0x1a922)
+    //   #3  0x00000000f753e834 __libc_message (libc.so.6 + 0x50834)
+    //   #4  0x00000000f7543606 malloc_printerr (libc.so.6 + 0x55606)
+    //   #5  0x00000000f7544bd2 _int_free (libc.so.6 + 0x56bd2)
+    //   #6  0x0000000000508b6e _Z5funcCv (coredump_example + 0xb6e)
+
+    std::ifstream contents(crashreport);
+    if (!contents) {
+        PLUGIN_ERROR("File open error %s (%d)", crashreport.c_str(), errno);
+        return false;
+    }
+    string line;
+    smatch match;
+    bool matched = false;
+    while (getline(contents, line)) {
+        PLUGIN_DEBUG(" < %s", line.c_str());
+        if (string::npos == line.find("Stack trace of thread"))
+            continue;
+        break;
+    }
+    while (getline(contents, line)) {
+        // #0  0x0000000000487ba4 _Z5funcCv (coredump_example + 0xba4)
+        // #0  0x00000000b6cb3c26 n/a (libc.so.6 + 0x1ac26)
+        // #0  0x00000000f7508de6 __libc_do_syscall (libc.so.6 + 0x1ade6)
+        // [:graph:] = letters, digits, and punctuation
+        // [:print:] = [:graph:] and space
+        if (!regex_match(line, match, regex("\\s*#([0-9]+)\\s+0x[0-9a-zA-Z]+\\s+([[:graph:]]+)\\s+([[:print:]]+)"))) {
+            PLUGIN_INFO("Not matched: %s", line.c_str());
+            continue;
+        }
+        // string(match[3]) : (coredmp_example + 0xba4)
+        // string(match[2]) : _Z5funcCv
+        // Summary: /usr/bin/coredump_example 'in _Z5funcCv (coredmp_example + 0xba4)'
+        if (match.ready() && match.size() == 4) {
+            if (string(match[1]).find("0") == 0) {
+                PLUGIN_INFO("Matched with #0  : (%s)", string(match[0]).c_str());
+                func = string("in ") + string(match[2]) + " " + string(match[3]);
+                matched = true;
+            }
+            if (string(match[3]).find(comm, 1) == 1) {
+                PLUGIN_INFO("Matched with comm: (%s)", string(match[0]).c_str());
+                func = string("in ") + string(match[2]) + " " + string(match[3]);
+                matched = true;
+                break;
+            }
+        }
+    }
+    return matched;
+}
+
 void InCrashinfoHandler::destroyCoredumpConfig(struct flb_in_coredump_config *ctx)
 {
     if (!ctx)
diff --git a/plugins/in_crashinfo/CrashinfoHandler.h b/plugins/in_crashinfo/CrashinfoHandler.h
index 7eec629..edf371e 100644
--- a/plugins/in_crashinfo/CrashinfoHandler.h
+++ b/plugins/in_crashinfo/CrashinfoHandler.h
@@ -62,9 +62,13 @@ public:
 private:
     InCrashinfoHandler();
 
+    void initDistroInfo();
     int verifyCoredumpFile(const char *corefile);
+    int parseCoredumpComm(const string& coredump, string& comm, string& pid, string& exe);
+    bool getCrashedFunction(const string& crashreport, const string& comm, string& func);
     void destroyCoredumpConfig(struct flb_in_coredump_config *ctx);
 
+    string m_distro;
     string m_workDir;
     int m_maxEntries;
 };
diff --git a/plugins/out_crashinfo/CrashinfoHandler.cpp b/plugins/out_crashinfo/CrashinfoHandler.cpp
index 03949b9..884a103 100644
--- a/plugins/out_crashinfo/CrashinfoHandler.cpp
+++ b/plugins/out_crashinfo/CrashinfoHandler.cpp
@@ -24,7 +24,9 @@
 #include "util/MSGPackUtil.h"
 #include "util/Logger.h"
 
-#define KEY_COMM_PID                "comm.pid"
+#define KEY_COMM                    "comm"
+#define KEY_EXE                     "exe"
+#define KEY_PID                     "pid"
 #define KEY_COREDUMP                "coredump"
 #define KEY_CRASHREPORT             "crashreport"
 #define KEY_JOURNALS                "journals"
@@ -120,7 +122,9 @@ void OutCrashinfoHandler::onFlush(const void *data, size_t bytes, const char *ta
     struct flb_time timestamp;
     msgpack_object* payload;
 
-    string commPid;
+    string comm;
+    string exe;
+    string pid;
     string coredump;
     string crashreport;
     string journals;
@@ -137,8 +141,14 @@ void OutCrashinfoHandler::onFlush(const void *data, size_t bytes, const char *ta
             continue;
         }
 
-        if (MSGPackUtil::getValue(payload, KEY_COMM_PID, commPid)) {
-            PLUGIN_INFO("%s : %s", KEY_COMM_PID, commPid.c_str());
+        if (MSGPackUtil::getValue(payload, KEY_COMM, comm)) {
+            PLUGIN_INFO("%s : %s", KEY_COMM, comm.c_str());
+        }
+        if (MSGPackUtil::getValue(payload, KEY_EXE, exe)) {
+            PLUGIN_INFO("%s : %s", KEY_EXE, exe.c_str());
+        }
+        if (MSGPackUtil::getValue(payload, KEY_PID, pid)) {
+            PLUGIN_INFO("%s : %s", KEY_PID, pid.c_str());
         }
         if (MSGPackUtil::getValue(payload, KEY_COREDUMP, coredump)) {
             PLUGIN_INFO("%s : %s", KEY_COREDUMP, coredump.c_str());
@@ -186,10 +196,10 @@ void OutCrashinfoHandler::onFlush(const void *data, size_t bytes, const char *ta
             }
         }
 
-        string command = string("tar zcf ") + File::join(m_workDir, commPid + ".tgz ") + "-C / "
+        string command = string("tar zcf ") + File::join(m_workDir, comm + "." + pid + ".tgz ") + "-C / "
                        // coredump is not generated in MP build.
                        + (access(coredump.c_str(), F_OK) == 0 ? coredump : "") + " "
-                       + crashreport + " " + journals + " " + messages + " " + screenshot + " " + sysinfo;
+                       + "'" + crashreport + "' " + journals + " " + messages + " " + screenshot + " " + sysinfo;
         PLUGIN_INFO("command : %s", command.c_str());
         int rc = system(command.c_str());
         if (rc == -1) {
diff --git a/plugins/out_jira/JiraHandler.cpp b/plugins/out_jira/JiraHandler.cpp
index b84346b..f5addf4 100644
--- a/plugins/out_jira/JiraHandler.cpp
+++ b/plugins/out_jira/JiraHandler.cpp
@@ -40,7 +40,9 @@
 #define KEY_PASSWORD            "password"
 #define KEY_PRIORITY            "priority"
 #define KEY_REPRODUCIBILITY     "reproducibility"
-#define KEY_COMM_PID            "comm.pid"
+#define KEY_COMM                "comm"
+#define KEY_EXE                 "exe"
+#define KEY_PID                 "pid"
 #define KEY_COREDUMP            "coredump"
 #define KEY_CRASHREPORT         "crashreport"
 #define KEY_JOURNALS            "journals"
@@ -202,7 +204,9 @@ void JiraHandler::onFlush(const void *data, size_t bytes, const char *tag, int t
     string priority;
     string reproducibility;
     // newly added for in_coredump
-    string commPid;
+    string comm;
+    string exe;
+    string pid;
     string coredump;
     string crashreport;
     string journals;
@@ -210,9 +214,6 @@ void JiraHandler::onFlush(const void *data, size_t bytes, const char *tag, int t
     string screenshot;
     string sysinfo;
     string command;
-    string comm;
-    string pid;
-    string exe;
     string crashedFunc;
 
     if (m_isNFSMode) {
@@ -226,7 +227,7 @@ void JiraHandler::onFlush(const void *data, size_t bytes, const char *tag, int t
         return;
     }
 
-    bool isCrashReport = (string::npos != string(tag, tag_len).find("crashinfo"));
+    bool isCrashReport = (string::npos != string(tag, tag_len).find("crash")); // crashd crashinfo
 
     msgpack_unpacked_init(&message);
     while (msgpack_unpack_next(&message, (const char*)data, bytes, &off) == MSGPACK_UNPACK_SUCCESS) {
@@ -258,8 +259,14 @@ void JiraHandler::onFlush(const void *data, size_t bytes, const char *tag, int t
         if (MSGPackUtil::getValue(payload, KEY_REPRODUCIBILITY, reproducibility)) {
             PLUGIN_INFO("reproducibility : %s", reproducibility.c_str());
         }
-        if (MSGPackUtil::getValue(payload, KEY_COMM_PID, commPid)) {
-            PLUGIN_INFO("%s : %s", KEY_COMM_PID, commPid.c_str());
+        if (MSGPackUtil::getValue(payload, KEY_COMM, comm)) {
+            PLUGIN_INFO("%s : %s", KEY_COMM, comm.c_str());
+        }
+        if (MSGPackUtil::getValue(payload, KEY_EXE, exe)) {
+            PLUGIN_INFO("%s : %s", KEY_EXE, exe.c_str());
+        }
+        if (MSGPackUtil::getValue(payload, KEY_PID, pid)) {
+            PLUGIN_INFO("%s : %s", KEY_PID, pid.c_str());
         }
         if (MSGPackUtil::getValue(payload, KEY_COREDUMP, coredump)) {
             PLUGIN_INFO("%s : %s", KEY_COREDUMP, coredump.c_str());
@@ -280,11 +287,6 @@ void JiraHandler::onFlush(const void *data, size_t bytes, const char *tag, int t
             PLUGIN_INFO("%s : %s", KEY_SYSINFO, sysinfo.c_str());
         }
 
-        if (parseCoredumpComm(coredump, comm, pid, exe) == -1) {
-            PLUGIN_ERROR("Fail to parse coredump file");
-            continue;
-        }
-        PLUGIN_INFO("comm : (%s), pid : (%s), exe (%s)", comm.c_str(), pid.c_str(), exe.c_str());
         if (checkExeTime(exe) == -1) {
             PLUGIN_WARN("Not official exe file");
             continue;
@@ -293,13 +295,6 @@ void JiraHandler::onFlush(const void *data, size_t bytes, const char *tag, int t
             PLUGIN_WARN("The exe file exists in exception list.");
             continue;
         }
-        if (summary.empty()) {
-            if (!getCrashedFunction(crashreport.c_str(), comm, crashedFunc)) {
-                PLUGIN_WARN("Failed to find crashed function");
-                crashedFunc = "";
-            }
-            summary = "[RDX_CRASH][" + m_distro + "] " + exe + " " + crashedFunc;
-        }
 
         command = "webos_issue.py --summary \'" + summary + "\' "
                 + (username.empty() ? "" : "--id '" + username + "' ")
@@ -307,7 +302,7 @@ void JiraHandler::onFlush(const void *data, size_t bytes, const char *tag, int t
                 + (description.empty() ? "" : "--description '" + description + "' ")
                 + (priority.empty() ? "" : "--priority " + priority + " ")
                 + (reproducibility.empty() ? "" : "--reproducibility \"" + reproducibility + "\" ")
-                + (isCrashReport ? "--unique-summary --attach-crashcounter --without-sysinfo --without-screenshot --upload-files \'" + coredump + "\' " + crashreport + " " + journals + " " + messages + " " + screenshot + " " + sysinfo
+                + (isCrashReport ? "--unique-summary --attach-crashcounter --without-sysinfo --without-screenshot --upload-files \'" + coredump + "\' \'" + crashreport + "\' " + journals + " " + messages + " " + screenshot + " " + sysinfo
                                  : "--enable-popup " + (upload_files.empty() ? "" : "--upload-files " + upload_files));
         PLUGIN_INFO("command : %s", command.c_str());
 
@@ -434,167 +429,6 @@ int JiraHandler::checkOpkgChecksum()
         return -1;
 }
 
-int JiraHandler::parseCoredumpComm(const string& coredump, string& comm, string& pid, string& exe)
-{
-    // template : core | comm | uid | boot id | pid | timestamp
-    // example  : core.coreexam.0.5999de4a29fb442eb75fb52f8eb64d20.1476.1615253999000000.xz
-
-    ssize_t buflen, keylen, vallen;
-    char exe_str[STR_LEN];
-    char *buf, *key, *val;
-
-    PLUGIN_INFO("Full param : (%s)", coredump.c_str());
-
-    // Determine the length of the buffer needed.
-    buflen = listxattr(coredump.c_str(), NULL, 0);
-    if (buflen == -1) {
-        PLUGIN_ERROR("Failed listxattr");
-        return -1;
-    }
-    if (buflen == 0) {
-        PLUGIN_ERROR("No attributes");
-        return -1;
-    }
-
-    // Allocate the buffer.
-    buf = (char*)malloc(buflen);
-    if (buf == NULL) {
-        PLUGIN_ERROR("Failed malloc");
-        return -1;
-    }
-
-    // Copy the list of attribute keys to the buffer
-    buflen = listxattr(coredump.c_str(), buf, buflen);
-    PLUGIN_DEBUG("buflen : (%d)", buflen);
-
-    if (buflen == -1) {
-        return -1;
-    } else if (buflen == 0) {
-        PLUGIN_ERROR("No attributes full : (%s)", coredump.c_str());
-        return -1;
-    }
-
-    key = buf;
-    while (0 < buflen) {
-
-        // Output attribute key
-        PLUGIN_DEBUG("key : (%s)", key);
-
-        // Determine length of the value
-        vallen = getxattr(coredump.c_str(), key, NULL, 0);
-
-        if (vallen == -1) {
-            PLUGIN_ERROR("Failed getxattr");
-        } else if (vallen == 0) {
-            PLUGIN_ERROR("No value");
-        } else {
-            val = (char*)malloc(vallen + 1);
-            if (val == NULL) {
-                PLUGIN_ERROR("Failed malloc");
-                return -1;
-            }
-
-            // Copy value to buffer
-            vallen = getxattr(coredump.c_str(), key, val, vallen);
-            if (vallen == -1) {
-                PLUGIN_ERROR("Failed getxattr");
-            } else {
-                // Check attribute value (exe, pid)
-                val[vallen] = 0;
-                PLUGIN_DEBUG("val : (%s)", val);
-
-                if (strstr(key, "pid") != NULL)
-                    pid = val;
-                if (strstr(key, "exe") != NULL)
-                    exe = val;
-            }
-            free(val);
-        }
-
-        // Forward to next attribute key.
-        keylen = strlen(key) + 1;
-        buflen -= keylen;
-        key += keylen;
-    }
-    free(buf);
-
-    strncpy(exe_str, exe.c_str(), STR_LEN);
-    exe_str[STR_LEN-1] = '\0';
-
-    char *ptr = strtok(exe_str, "/");
-    while (ptr != NULL)
-    {
-        PLUGIN_DEBUG("ptr : (%s)", ptr);
-        if (strcmp(ptr, "usr") != 0 && strcmp(ptr, "bin") != 0 && strcmp(ptr, "sbin") != 0) {
-            comm = ptr;
-            break;
-        }
-        ptr = strtok(NULL, "/");
-    }
-
-    return 0;
-}
-
-bool JiraHandler::getCrashedFunction(const string& crashreport, const string& comm, string& func)
-{
-    // A crashreport contains the following stacktrace.
-    // The first line here isn't really helpful: __libc_do_syscall (libc.so.6 + 0x1ade6)
-    // So here try to fina a meaningful line: _Z5funcCv (coredump_example + 0xb6e)
-    // ...
-    // Found module coredump_example with build-id: 331c2591ed23996f271990c41f3775874eff0ba7
-    // Stack trace of thread 13609:
-    //   #0  0x00000000f7508de6 __libc_do_syscall (libc.so.6 + 0x1ade6)
-    //   #1  0x00000000f7517416 __libc_signal_restore_set (libc.so.6 + 0x29416)
-    //   #2  0x00000000f7508922 __GI_abort (libc.so.6 + 0x1a922)
-    //   #3  0x00000000f753e834 __libc_message (libc.so.6 + 0x50834)
-    //   #4  0x00000000f7543606 malloc_printerr (libc.so.6 + 0x55606)
-    //   #5  0x00000000f7544bd2 _int_free (libc.so.6 + 0x56bd2)
-    //   #6  0x0000000000508b6e _Z5funcCv (coredump_example + 0xb6e)
-
-    std::ifstream contents(crashreport);
-    if (!contents) {
-        PLUGIN_ERROR("File open error %s (%d)", crashreport.c_str(), errno);
-        return false;
-    }
-    string line;
-    smatch match;
-    bool matched = false;
-    while (getline(contents, line)) {
-        PLUGIN_DEBUG(" < %s", line.c_str());
-        if (string::npos == line.find("Stack trace of thread"))
-            continue;
-        break;
-    }
-    while (getline(contents, line)) {
-        // #0  0x0000000000487ba4 _Z5funcCv (coredump_example + 0xba4)
-        // #0  0x00000000b6cb3c26 n/a (libc.so.6 + 0x1ac26)
-        // #0  0x00000000f7508de6 __libc_do_syscall (libc.so.6 + 0x1ade6)
-        // [:graph:] = letters, digits, and punctuation
-        // [:print:] = [:graph:] and space
-        if (!regex_match(line, match, regex("\\s*#([0-9]+)\\s+0x[0-9a-zA-Z]+\\s+([[:graph:]]+)\\s+([[:print:]]+)"))) {
-            PLUGIN_INFO("Not matched: %s", line.c_str());
-            continue;
-        }
-        // string(match[3]) : (coredmp_example + 0xba4)
-        // string(match[2]) : _Z5funcCv
-        // Summary: /usr/bin/coredump_example 'in _Z5funcCv (coredmp_example + 0xba4)'
-        if (match.ready() && match.size() == 4) {
-            if (string(match[1]).find("0") == 0) {
-                PLUGIN_INFO("Matched with #0  : (%s)", string(match[0]).c_str());
-                func = string("in ") + string(match[2]) + " " + string(match[3]);
-                matched = true;
-            }
-            if (string(match[3]).find(comm, 1) == 1) {
-                PLUGIN_INFO("Matched with comm: (%s)", string(match[0]).c_str());
-                func = string("in ") + string(match[2]) + " " + string(match[3]);
-                matched = true;
-                break;
-            }
-        }
-    }
-    return matched;
-}
-
 int JiraHandler::checkExeTime(const string& exe)
 {
     PLUGIN_INFO("Check time of (%s) file", exe.c_str());
diff --git a/plugins/out_jira/JiraHandler.h b/plugins/out_jira/JiraHandler.h
index 28a2400..e86bef0 100644
--- a/plugins/out_jira/JiraHandler.h
+++ b/plugins/out_jira/JiraHandler.h
@@ -55,7 +55,6 @@ private:
     void initDistroInfo();
     int initOpkgChecksum();
     int checkOpkgChecksum();
-    int parseCoredumpComm(const string& coredump, string& comm, string& pid, string& exe);
     bool getCrashedFunction(const string& crashreport, const string& comm, string& func);
     int checkExeTime(const string& exe);
     bool isExceptedExe(const string& exe);
diff --git a/python3-webos/webos_issue.py b/python3-webos/webos_issue.py
index 21c2015..4b96af9 100755
--- a/python3-webos/webos_issue.py
+++ b/python3-webos/webos_issue.py
@@ -207,7 +207,7 @@ class WebOSIssue:
                 desc = "MESSAGES"
             elif basename.startswith('screenshot'):
                 desc = "SCREENSHOT"
-            elif basename.find('crashreport.txt') > 0:
+            elif basename.find('crashreport.txt') > 0 or basename.startswith('RDXD_'):
                 desc = "CRASHREPORT"
             elif basename.startswith("core"):
                 desc = "COREDUMP"
-- 
2.25.1

