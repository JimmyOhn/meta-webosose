From 093dbc89a97ab3624afdbd5cddd9c8889d7fa371 Mon Sep 17 00:00:00 2001
From: Elvis Lee <kwangwoong.lee@lge.com>
Date: Thu, 6 Oct 2022 16:13:06 +0900
Subject: [PATCH] Revert "Use opaque render list when client content is opaque"

:Release Notes:
Workaround to fix that transparent region is not working

:Detailed Notes:
This reverts commit 00323844defd67b0edc76db1c56ba32433a232bf.

:Issues Addressed:
[WRO-10715] Not to request wl_surface@set_opaque_region for transparent region
---
 .../compositor_api/qwaylandquickitem.cpp      |  4 +--
 .../compositor_api/qwaylandsurface.cpp        | 34 ++-----------------
 .../compositor_api/qwaylandsurface.h          |  3 --
 .../compositor_api/qwaylandsurface_p.h        |  1 -
 4 files changed, 5 insertions(+), 37 deletions(-)

diff --git a/src/compositor/compositor_api/qwaylandquickitem.cpp b/src/compositor/compositor_api/qwaylandquickitem.cpp
index eb241205..eba23b91 100644
--- a/src/compositor/compositor_api/qwaylandquickitem.cpp
+++ b/src/compositor/compositor_api/qwaylandquickitem.cpp
@@ -346,7 +346,7 @@ void QWaylandBufferMaterial::setBufferRef(QWaylandQuickItem *surfaceItem, const
         if (auto texture = ref.toOpenGLTexture(plane)) {
             QQuickWindow::CreateTextureOptions opt;
             QWaylandQuickSurface *waylandSurface = qobject_cast<QWaylandQuickSurface *>(surfaceItem->surface());
-            if (waylandSurface != nullptr && waylandSurface->useTextureAlpha() && !waylandSurface->isOpaque())
+            if (waylandSurface != nullptr && waylandSurface->useTextureAlpha())
                 opt |= QQuickWindow::TextureHasAlphaChannel;
             QSGTexture *scenegraphTexture;
             if (ref.bufferFormatEgl() == QWaylandBufferRef::BufferFormatEgl_EXTERNAL_OES) {
@@ -396,7 +396,7 @@ public:
 #if QT_CONFIG(opengl)
                 QQuickWindow::CreateTextureOptions opt;
                 QWaylandQuickSurface *surface = qobject_cast<QWaylandQuickSurface *>(surfaceItem->surface());
-                if (surface && surface->useTextureAlpha()  && !surface->isOpaque()) {
+                if (surface && surface->useTextureAlpha()) {
                     opt |= QQuickWindow::TextureHasAlphaChannel;
                 }
 
diff --git a/src/compositor/compositor_api/qwaylandsurface.cpp b/src/compositor/compositor_api/qwaylandsurface.cpp
index 88147944..b5ae6e8d 100644
--- a/src/compositor/compositor_api/qwaylandsurface.cpp
+++ b/src/compositor/compositor_api/qwaylandsurface.cpp
@@ -231,7 +231,6 @@ void QWaylandSurfacePrivate::surface_commit(Resource *)
     QSize surfaceSize = bufferSize / bufferScale;
     sourceGeometry = !pending.sourceGeometry.isValid() ? QRect(QPoint(), surfaceSize) : pending.sourceGeometry;
     destinationSize = pending.destinationSize.isEmpty() ? sourceGeometry.size().toSize() : pending.destinationSize;
-    QRect destinationRect(QPoint(), destinationSize);
     if (!pending.damageInBufferCoordinates || pending.bufferScale == 1) {
         // pending.damage is already in surface coordinates
         damage = pending.damage.intersected(QRect(QPoint(), destinationSize));
@@ -247,19 +246,13 @@ void QWaylandSurfacePrivate::surface_commit(Resource *)
         };
         damage = {};
         for (const QRect &r : pending.damage) {
-            damage |= xform(r, bufferScale).intersected(destinationRect);
+            damage |= xform(r, bufferScale).intersected(QRect{{}, destinationSize});
         }
     }
     hasContent = bufferRef.hasContent();
     frameCallbacks << pendingFrameCallbacks;
-    inputRegion = pending.inputRegion.intersected(destinationRect);
-    opaqueRegion = pending.opaqueRegion.intersected(destinationRect);
-    bool becameOpaque = opaqueRegion.boundingRect().contains(destinationRect);
-    if (becameOpaque != isOpaque) {
-        isOpaque = becameOpaque;
-        emit q->isOpaqueChanged();
-    }
-
+    inputRegion = pending.inputRegion.intersected(QRect(QPoint(), destinationSize));
+    opaqueRegion = pending.opaqueRegion.intersected(QRect(QPoint(), destinationSize));
     QPoint offsetForNextFrame = pending.offset;
 
     if (viewport)
@@ -838,27 +831,6 @@ bool QWaylandSurface::inhibitsIdle() const
     return !d->idleInhibitors.isEmpty();
 }
 
-/*!
- *  \qmlproperty bool QtWaylandCompositor::WaylandSurface::isOpaque
- *  \since 6.4
- *
- *  This property holds whether the surface is fully opaque, as reported by the
- *  client through the set_opaque_region request.
- */
-
-/*!
- *  \property QWaylandSurface::isOpaque
- *  \since 6.4
- *
- *  This property holds whether the surface is fully opaque, as reported by the
- *  client through the set_opaque_region request.
- */
-bool QWaylandSurface::isOpaque() const
-{
-    Q_D(const QWaylandSurface);
-    return d->isOpaque;
-}
-
 #if QT_CONFIG(im)
 QWaylandInputMethodControl *QWaylandSurface::inputMethodControl() const
 {
diff --git a/src/compositor/compositor_api/qwaylandsurface.h b/src/compositor/compositor_api/qwaylandsurface.h
index 0494a091..db6a49f1 100644
--- a/src/compositor/compositor_api/qwaylandsurface.h
+++ b/src/compositor/compositor_api/qwaylandsurface.h
@@ -52,7 +52,6 @@ class Q_WAYLANDCOMPOSITOR_EXPORT QWaylandSurface : public QWaylandObject
     Q_PROPERTY(bool hasContent READ hasContent NOTIFY hasContentChanged)
     Q_PROPERTY(bool cursorSurface READ isCursorSurface WRITE markAsCursorSurface NOTIFY cursorSurfaceChanged)
     Q_PROPERTY(bool inhibitsIdle READ inhibitsIdle NOTIFY inhibitsIdleChanged REVISION(1, 14))
-    Q_PROPERTY(bool isOpaque READ isOpaque NOTIFY isOpaqueChanged REVISION(6, 4))
     Q_MOC_INCLUDE("qwaylanddrag.h")
     Q_MOC_INCLUDE("qwaylandcompositor.h")
 
@@ -113,7 +112,6 @@ public:
     bool isCursorSurface() const;
 
     bool inhibitsIdle() const;
-    bool isOpaque() const;
 
 #if QT_CONFIG(im)
     QWaylandInputMethodControl *inputMethodControl() const;
@@ -146,7 +144,6 @@ Q_SIGNALS:
     void dragStarted(QWaylandDrag *drag);
     void cursorSurfaceChanged();
     Q_REVISION(14) void inhibitsIdleChanged();
-    Q_REVISION(6, 4) void isOpaqueChanged();
 
     void configure(bool hasBuffer);
     void redraw();
diff --git a/src/compositor/compositor_api/qwaylandsurface_p.h b/src/compositor/compositor_api/qwaylandsurface_p.h
index c0beec7d..7cf90701 100644
--- a/src/compositor/compositor_api/qwaylandsurface_p.h
+++ b/src/compositor/compositor_api/qwaylandsurface_p.h
@@ -146,7 +146,6 @@ public: //member variables
     bool destroyed = false;
     bool hasContent = false;
     bool isInitialized = false;
-    bool isOpaque = false;
     Qt::ScreenOrientation contentOrientation = Qt::PrimaryOrientation;
     QWindow::Visibility visibility;
 #if QT_CONFIG(im)
-- 
2.17.1

