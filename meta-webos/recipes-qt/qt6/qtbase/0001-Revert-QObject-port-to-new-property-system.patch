From a9887fd70acae54d06ac560c401e4b0be953e9c8 Mon Sep 17 00:00:00 2001
From: Hyungchan Kim <hyungchan2.kim@lge.com>
Date: Thu, 6 May 2021 16:09:04 +0900
Subject: [PATCH] Revert "QObject: port to new property system"

This reverts commit 1a65a4faf52f83ba3fbbba88cea1c4bb800e8de7.
It is a workaround for QTBUG-93890.

Upstream-Status : Inappropriate [workaround]
---
 src/corelib/global/qhooks.cpp                 |  2 +-
 src/corelib/kernel/qobject.cpp                | 30 ++++--------------
 src/corelib/kernel/qobject.h                  |  4 +--
 src/corelib/kernel/qobject_p.h                | 31 +++----------------
 .../corelib/kernel/qobject/CMakeLists.txt     |  3 +-
 .../corelib/kernel/qobject/tst_qobject.cpp    | 11 +------
 .../other/toolsupport/tst_toolsupport.cpp     |  2 +-
 7 files changed, 15 insertions(+), 68 deletions(-)

diff --git a/src/corelib/global/qhooks.cpp b/src/corelib/global/qhooks.cpp
index 491e126b7a..c3a625bb5f 100644
--- a/src/corelib/global/qhooks.cpp
+++ b/src/corelib/global/qhooks.cpp
@@ -67,7 +67,7 @@ quintptr Q_CORE_EXPORT qtHookData[] = {
     // The required sizes and offsets are tested in tests/auto/other/toolsupport.
     // When this fails and the change was intentional, adjust the test and
     // adjust this value here.
-    21
+    20
 };
 
 static_assert(QHooks::LastHookIndex == sizeof(qtHookData) / sizeof(qtHookData[0]));
diff --git a/src/corelib/kernel/qobject.cpp b/src/corelib/kernel/qobject.cpp
index b115066dce..343922581c 100644
--- a/src/corelib/kernel/qobject.cpp
+++ b/src/corelib/kernel/qobject.cpp
@@ -1214,11 +1214,6 @@ QObjectPrivate::Connection::~Connection()
 QString QObject::objectName() const
 {
     Q_D(const QObject);
-    if (!d->extraData && QtPrivate::isAnyBindingEvaluating()) {
-        QObjectPrivate *dd = const_cast<QObjectPrivate *>(d);
-        // extraData is mutable, so this should be safe
-        dd->extraData = new QObjectPrivate::ExtraData(dd);
-    }
     return d->extraData ? d->extraData->objectName : QString();
 }
 
@@ -1228,28 +1223,15 @@ QString QObject::objectName() const
 void QObject::setObjectName(const QString &name)
 {
     Q_D(QObject);
-
     if (!d->extraData)
-        d->extraData = new QObjectPrivate::ExtraData(d);
-
-    d->extraData->objectName.removeBindingUnlessInWrapper();
+        d->extraData = new QObjectPrivate::ExtraData;
 
     if (d->extraData->objectName != name) {
-        d->extraData->objectName.setValueBypassingBindings(name);
-        d->extraData->objectName.notify(); // also emits a signal
+        d->extraData->objectName = name;
+        emit objectNameChanged(d->extraData->objectName, QPrivateSignal());
     }
 }
 
-QBindable<QString> QObject::bindableObjectName()
-{
-    Q_D(QObject);
-
-    if (!d->extraData)
-        d->extraData = new QObjectPrivate::ExtraData(d);
-
-    return QBindable<QString>(&d->extraData->objectName);
-}
-
 /*! \fn void QObject::objectNameChanged(const QString &objectName)
 
     This signal is emitted after the object's name has been changed. The new object name is passed as \a objectName.
@@ -1749,7 +1731,7 @@ int QObject::startTimer(int interval, Qt::TimerType timerType)
     }
     int timerId = thisThreadData->eventDispatcher.loadRelaxed()->registerTimer(interval, timerType, this);
     if (!d->extraData)
-        d->extraData = new QObjectPrivate::ExtraData(d);
+        d->extraData = new QObjectPrivate::ExtraData;
     d->extraData->runningTimers.append(timerId);
     return timerId;
 }
@@ -2182,7 +2164,7 @@ void QObject::installEventFilter(QObject *obj)
     }
 
     if (!d->extraData)
-        d->extraData = new QObjectPrivate::ExtraData(d);
+        d->extraData = new QObjectPrivate::ExtraData;
 
     // clean up unused items in the list
     d->extraData->eventFilters.removeAll((QObject *)nullptr);
@@ -3989,7 +3971,7 @@ bool QObject::setProperty(const char *name, const QVariant &value)
     int id = meta->indexOfProperty(name);
     if (id < 0) {
         if (!d->extraData)
-            d->extraData = new QObjectPrivate::ExtraData(d);
+            d->extraData = new QObjectPrivate::ExtraData;
 
         const int idx = d->extraData->propertyNames.indexOf(name);
 
diff --git a/src/corelib/kernel/qobject.h b/src/corelib/kernel/qobject.h
index c59518367d..5742db1c22 100644
--- a/src/corelib/kernel/qobject.h
+++ b/src/corelib/kernel/qobject.h
@@ -120,8 +120,7 @@ class Q_CORE_EXPORT QObject
 {
     Q_OBJECT
 
-    Q_PROPERTY(QString objectName READ objectName WRITE setObjectName NOTIFY objectNameChanged
-                       BINDABLE bindableObjectName)
+    Q_PROPERTY(QString objectName READ objectName WRITE setObjectName NOTIFY objectNameChanged)
     Q_DECLARE_PRIVATE(QObject)
 
 public:
@@ -138,7 +137,6 @@ public:
 
     QString objectName() const;
     void setObjectName(const QString &name);
-    QBindable<QString> bindableObjectName();
 
     inline bool isWidgetType() const { return d_ptr->isWidget; }
     inline bool isWindowType() const { return d_ptr->isWindow; }
diff --git a/src/corelib/kernel/qobject_p.h b/src/corelib/kernel/qobject_p.h
index 4f38796c81..019473018f 100644
--- a/src/corelib/kernel/qobject_p.h
+++ b/src/corelib/kernel/qobject_p.h
@@ -61,7 +61,6 @@
 #include "QtCore/qsharedpointer.h"
 #include "QtCore/qvariant.h"
 #include "QtCore/qproperty.h"
-#include "QtCore/private/qproperty_p.h"
 
 QT_BEGIN_NAMESPACE
 
@@ -103,26 +102,12 @@ class Q_CORE_EXPORT QObjectPrivate : public QObjectData
 public:
     struct ExtraData
     {
-        ExtraData(QObjectPrivate *ptr) : parent(ptr) { }
-
-        inline void setObjectNameForwarder(const QString &name)
-        {
-            parent->q_func()->setObjectName(name);
-        }
-
-        inline void nameChangedForwarder(const QString &name)
-        {
-            Q_EMIT parent->q_func()->objectNameChanged(name, QObject::QPrivateSignal());
-        }
-
+        ExtraData() {}
         QList<QByteArray> propertyNames;
         QList<QVariant> propertyValues;
         QList<int> runningTimers;
         QList<QPointer<QObject>> eventFilters;
-        Q_OBJECT_COMPAT_PROPERTY(QObjectPrivate::ExtraData, QString, objectName,
-                                 &QObjectPrivate::ExtraData::setObjectNameForwarder,
-                                 &QObjectPrivate::ExtraData::nameChangedForwarder)
-        QObjectPrivate *parent;
+        QString objectName;
     };
 
     typedef void (*StaticMetaCallFunction)(QObject *, QMetaObject::Call, int, void **);
@@ -384,9 +369,8 @@ public:
         cd->ref.ref();
         connections.storeRelaxed(cd);
     }
-
 public:
-    mutable ExtraData *extraData; // extra data set by the user
+    ExtraData *extraData;    // extra data set by the user
     // This atomic requires acquire/release semantics in a few places,
     // e.g. QObject::moveToThread must synchronize with QCoreApplication::postEvent,
     // because postEvent is thread-safe.
@@ -635,14 +619,7 @@ inline QBindingStorage *qGetBindingStorage(QObjectPrivate *o)
 {
     return &o->bindingStorage;
 }
-inline const QBindingStorage *qGetBindingStorage(const QObjectPrivate::ExtraData *ed)
-{
-    return &ed->parent->bindingStorage;
-}
-inline QBindingStorage *qGetBindingStorage(QObjectPrivate::ExtraData *ed)
-{
-    return &ed->parent->bindingStorage;
-}
+
 
 QT_END_NAMESPACE
 
diff --git a/tests/auto/corelib/kernel/qobject/CMakeLists.txt b/tests/auto/corelib/kernel/qobject/CMakeLists.txt
index a231ef985f..7ff42f7212 100644
--- a/tests/auto/corelib/kernel/qobject/CMakeLists.txt
+++ b/tests/auto/corelib/kernel/qobject/CMakeLists.txt
@@ -9,10 +9,9 @@ qt_internal_add_test(tst_qobject
         tst_qobject.cpp
     DEFINES
         QT_DISABLE_DEPRECATED_BEFORE=0
-    LIBRARIES
+    PUBLIC_LIBRARIES
         Qt::CorePrivate
         Qt::Network
-        Qt::TestPrivate
 )
 
 ## Scopes:
diff --git a/tests/auto/corelib/kernel/qobject/tst_qobject.cpp b/tests/auto/corelib/kernel/qobject/tst_qobject.cpp
index f5c16faa56..f36a40e5df 100644
--- a/tests/auto/corelib/kernel/qobject/tst_qobject.cpp
+++ b/tests/auto/corelib/kernel/qobject/tst_qobject.cpp
@@ -1,6 +1,6 @@
 /****************************************************************************
 **
-** Copyright (C) 2021 The Qt Company Ltd.
+** Copyright (C) 2016 The Qt Company Ltd.
 ** Copyright (C) 2015 Olivier Goffart <ogoffart@woboq.com>
 ** Contact: https://www.qt.io/licensing/
 **
@@ -28,7 +28,6 @@
 ****************************************************************************/
 
 #include <QTest>
-#include <QtTest/private/qpropertytesthelper_p.h>
 #include <QStringListModel>
 #include <QAbstractEventDispatcher>
 #include <QScopedValueRollback>
@@ -162,7 +161,6 @@ private slots:
     void functorReferencesConnection();
     void disconnectDisconnects();
     void singleShotConnection();
-    void objectNameBinding();
 };
 
 struct QObjectCreatedOnShutdown
@@ -8117,13 +8115,6 @@ void tst_QObject::singleShotConnection()
     }
 }
 
-void tst_QObject::objectNameBinding()
-{
-    QObject obj;
-    QTestPrivate::testReadWritePropertyBasics<QObject, QString>(obj, "test1", "test2",
-                                                                "objectName");
-}
-
 // Test for QtPrivate::HasQ_OBJECT_Macro
 static_assert(QtPrivate::HasQ_OBJECT_Macro<tst_QObject>::Value);
 static_assert(!QtPrivate::HasQ_OBJECT_Macro<SiblingDeleter>::Value);
diff --git a/tests/auto/other/toolsupport/tst_toolsupport.cpp b/tests/auto/other/toolsupport/tst_toolsupport.cpp
index 7ba4286a4d..2e46f022e7 100644
--- a/tests/auto/other/toolsupport/tst_toolsupport.cpp
+++ b/tests/auto/other/toolsupport/tst_toolsupport.cpp
@@ -109,7 +109,7 @@ void tst_toolsupport::offsets_data()
         QTestData &data = QTest::newRow("sizeof(QObjectPrivate::ExtraData)")
                 << sizeof(QObjectPrivate::ExtraData);
         // Please heed the comment at the top of this file when changing this line:
-        data << 64 << 128; // 4 * QList + 1 * QString + ptr
+        data << 60 << 120; // 4 * QList + 1 * QString
     }
 
 #if RUN_MEMBER_OFFSET_TEST
