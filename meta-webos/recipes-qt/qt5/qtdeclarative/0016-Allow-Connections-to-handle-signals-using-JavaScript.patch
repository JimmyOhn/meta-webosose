From 9cfad848f92689ac8a90494450341ca6a86ac2a1 Mon Sep 17 00:00:00 2001
From: Ulf Hermann <ulf.hermann@qt.io>
Date: Thu, 15 Aug 2019 15:19:31 +0200
Subject: [PATCH] Allow Connections to handle signals using JavaScript
 functions

Requiring full function definitions as signal handlers has two
advantages:

1, We don't need a custom parser that magically recognizes properties
   which would otherwise be an error in other components.
2, The user is forced to specify the full signature of the handler,
   including any parameters. This helps when the functions will
   eventually be compiled to C++

The old behavior is retained, generating a warning if any of the magic
bindings are still set in a Connections element. Only if no magic
bindings are found, the functions are connected. This is because there
might be functions named onFoo in old-style Connections elements and
silently connecting those to any matching signals would be a change in
behavior.

Change-Id: I8c78d8994fdcddd355fe822cde9a0702dc8c75de
Reviewed-by: Fabian Kosmale <fabian.kosmale@qt.io>
Reviewed-by: Simon Hausmann <simon.hausmann@qt.io>
Upstream-Status: Backport [https://codereview.qt-project.org/c/qt/qtdeclarative/+/270687]
---
 src/qml/types/qqmlconnections.cpp             | 72 ++++++++++++++++++-
 src/qml/types/qqmlconnections_p.h             |  4 ++
 .../connection-no-signal-name.qml             |  0
 .../connection-targetchange.qml               |  0
 .../connection-unknownsignals-ignored.qml     |  0
 .../connection-unknownsignals-notarget.qml    |  0
 .../connection-unknownsignals-parent.qml      |  0
 .../connection-unknownsignals.qml             |  0
 .../data/{ => bindings}/disabled-at-start.qml |  0
 .../{ => bindings}/override-proxy-type.qml    |  0
 .../{ => bindings}/rewriteError-global.qml    |  0
 .../{ => bindings}/rewriteError-unnamed.qml   |  0
 .../{ => bindings}/singletontype-target.qml   |  0
 .../test-connection-implicit.qml              |  0
 .../data/{ => bindings}/test-connection.qml   |  0
 .../data/{ => bindings}/trimming.qml          |  0
 .../functions/connection-no-signal-name.qml   | 15 ++++
 .../functions/connection-targetchange.qml     | 25 +++++++
 .../connection-unknownsignals-ignored.qml     | 17 +++++
 .../connection-unknownsignals-notarget.qml    |  9 +++
 .../connection-unknownsignals-parent.qml      |  8 +++
 .../functions/connection-unknownsignals.qml   | 11 +++
 .../data/functions/disabled-at-start.qml      | 14 ++++
 .../data/functions/override-proxy-type.qml    | 13 ++++
 .../data/functions/rewriteError-global.qml    |  8 +++
 .../data/functions/rewriteError-unnamed.qml   |  8 +++
 .../data/functions/singletontype-target.qml   | 22 ++++++
 .../functions/test-connection-implicit.qml    |  9 +++
 .../data/functions/test-connection.qml        | 14 ++++
 .../data/functions/trimming.qml               | 13 ++++
 .../qqmlconnections/tst_qqmlconnections.cpp   | 70 ++++++++++++++----
 31 files changed, 315 insertions(+), 17 deletions(-)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/connection-no-signal-name.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/connection-targetchange.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/connection-unknownsignals-ignored.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/connection-unknownsignals-notarget.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/connection-unknownsignals-parent.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/connection-unknownsignals.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/disabled-at-start.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/override-proxy-type.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/rewriteError-global.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/rewriteError-unnamed.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/singletontype-target.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/test-connection-implicit.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/test-connection.qml (100%)
 rename tests/auto/qml/qqmlconnections/data/{ => bindings}/trimming.qml (100%)
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/connection-no-signal-name.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/connection-targetchange.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-ignored.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-notarget.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-parent.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/disabled-at-start.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/override-proxy-type.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/rewriteError-global.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/rewriteError-unnamed.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/singletontype-target.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/test-connection-implicit.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/test-connection.qml
 create mode 100644 tests/auto/qml/qqmlconnections/data/functions/trimming.qml

diff --git a/src/qml/types/qqmlconnections.cpp b/src/qml/types/qqmlconnections.cpp
index f601087690..bdb59e6032 100644
--- a/src/qml/types/qqmlconnections.cpp
+++ b/src/qml/types/qqmlconnections.cpp
@@ -44,6 +44,7 @@
 #include <private/qqmlboundsignal_p.h>
 #include <qqmlcontext.h>
 #include <private/qqmlcontext_p.h>
+#include <private/qqmlvmemetaobject_p.h>
 #include <qqmlinfo.h>
 
 #include <QtCore/qdebug.h>
@@ -105,7 +106,7 @@ public:
     \qml
     MouseArea {
         Connections {
-            onClicked: foo(parameters)
+            function onClicked(mouse) { foo(mouse) }
         }
     }
     \endqml
@@ -122,7 +123,7 @@ public:
     \qml
     Connections {
         target: area
-        onClicked: foo(parameters)
+        function onClicked(mouse) { foo(mouse) }
     }
     \endqml
 
@@ -270,8 +271,73 @@ void QQmlConnections::connectSignals()
     if (!d->componentcomplete || (d->targetSet && !target()))
         return;
 
-    if (d->bindings.isEmpty())
+    if (d->bindings.isEmpty()) {
+        connectSignalsToMethods();
+    } else {
+        qmlWarning(this) << tr("Implicitly defined onFoo properties in Connections are deprecated. "
+                               "Use this syntax instead: function onFoo(<arguments>) { ... }");
+        connectSignalsToBindings();
+    }
+}
+
+void QQmlConnections::connectSignalsToMethods()
+{
+    Q_D(QQmlConnections);
+
+    QObject *target = this->target();
+    QQmlData *ddata = QQmlData::get(this);
+    if (!ddata)
         return;
+
+    QV4::ExecutionEngine *engine = ddata->context->engine->handle();
+
+    QQmlContextData *ctxtdata = ddata->outerContext;
+    for (int i = ddata->propertyCache->methodOffset(),
+             end = ddata->propertyCache->methodOffset() + ddata->propertyCache->methodCount();
+         i < end;
+         ++i) {
+
+        QQmlPropertyData *handler = ddata->propertyCache->method(i);
+        if (!handler || !handler->isVMEFunction())
+            continue;
+
+        const QString propName = handler->name(this);
+
+        QQmlProperty prop(target, propName);
+        if (prop.isValid() && (prop.type() & QQmlProperty::SignalProperty)) {
+            int signalIndex = QQmlPropertyPrivate::get(prop)->signalIndex();
+            auto *signal = new QQmlBoundSignal(target, signalIndex, this, qmlEngine(this));
+            signal->setEnabled(d->enabled);
+
+            QV4::Scope scope(engine);
+            QV4::ScopedContext global(scope, engine->rootContext());
+
+            QQmlVMEMetaObject *vmeMetaObject = QQmlVMEMetaObject::get(this);
+            Q_ASSERT(vmeMetaObject); // the fact we found the property above should guarentee this
+
+            QV4::ScopedFunctionObject method(scope, vmeMetaObject->vmeMethod(handler->coreIndex()));
+
+            QQmlBoundSignalExpression *expression =
+                    ctxtdata ? new QQmlBoundSignalExpression(
+                                       target, signalIndex, ctxtdata, this,
+                                       method->as<QV4::FunctionObject>()->function())
+                             : nullptr;
+
+            signal->takeExpression(expression);
+            d->boundsignals += signal;
+        } else if (!d->ignoreUnknownSignals && propName.startsWith("on") && propName.length() > 2
+                   && propName.at(2).isUpper()) {
+            qmlWarning(this) << tr("Detected function \"%1\" in Connections element. "
+                                   "This is probably intended to be a signal handler but no "
+                                   "signal of the target matches the name.").arg(propName);
+        }
+    }
+}
+
+// TODO: Drop this as soon as we can
+void QQmlConnections::connectSignalsToBindings()
+{
+    Q_D(QQmlConnections);
     QObject *target = this->target();
     QQmlData *ddata = QQmlData::get(this);
     QQmlContextData *ctxtdata = ddata ? ddata->outerContext : nullptr;
diff --git a/src/qml/types/qqmlconnections_p.h b/src/qml/types/qqmlconnections_p.h
index bd03d7e152..9d595e771d 100644
--- a/src/qml/types/qqmlconnections_p.h
+++ b/src/qml/types/qqmlconnections_p.h
@@ -91,10 +91,14 @@ Q_SIGNALS:
 
 private:
     void connectSignals();
+    void connectSignalsToMethods();
+    void connectSignalsToBindings();
+
     void classBegin() override;
     void componentComplete() override;
 };
 
+// TODO: Drop this class as soon as we can
 class QQmlConnectionsParser : public QQmlCustomParser
 {
 public:
diff --git a/tests/auto/qml/qqmlconnections/data/connection-no-signal-name.qml b/tests/auto/qml/qqmlconnections/data/bindings/connection-no-signal-name.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/connection-no-signal-name.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/connection-no-signal-name.qml
diff --git a/tests/auto/qml/qqmlconnections/data/connection-targetchange.qml b/tests/auto/qml/qqmlconnections/data/bindings/connection-targetchange.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/connection-targetchange.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/connection-targetchange.qml
diff --git a/tests/auto/qml/qqmlconnections/data/connection-unknownsignals-ignored.qml b/tests/auto/qml/qqmlconnections/data/bindings/connection-unknownsignals-ignored.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/connection-unknownsignals-ignored.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/connection-unknownsignals-ignored.qml
diff --git a/tests/auto/qml/qqmlconnections/data/connection-unknownsignals-notarget.qml b/tests/auto/qml/qqmlconnections/data/bindings/connection-unknownsignals-notarget.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/connection-unknownsignals-notarget.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/connection-unknownsignals-notarget.qml
diff --git a/tests/auto/qml/qqmlconnections/data/connection-unknownsignals-parent.qml b/tests/auto/qml/qqmlconnections/data/bindings/connection-unknownsignals-parent.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/connection-unknownsignals-parent.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/connection-unknownsignals-parent.qml
diff --git a/tests/auto/qml/qqmlconnections/data/connection-unknownsignals.qml b/tests/auto/qml/qqmlconnections/data/bindings/connection-unknownsignals.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/connection-unknownsignals.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/connection-unknownsignals.qml
diff --git a/tests/auto/qml/qqmlconnections/data/disabled-at-start.qml b/tests/auto/qml/qqmlconnections/data/bindings/disabled-at-start.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/disabled-at-start.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/disabled-at-start.qml
diff --git a/tests/auto/qml/qqmlconnections/data/override-proxy-type.qml b/tests/auto/qml/qqmlconnections/data/bindings/override-proxy-type.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/override-proxy-type.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/override-proxy-type.qml
diff --git a/tests/auto/qml/qqmlconnections/data/rewriteError-global.qml b/tests/auto/qml/qqmlconnections/data/bindings/rewriteError-global.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/rewriteError-global.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/rewriteError-global.qml
diff --git a/tests/auto/qml/qqmlconnections/data/rewriteError-unnamed.qml b/tests/auto/qml/qqmlconnections/data/bindings/rewriteError-unnamed.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/rewriteError-unnamed.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/rewriteError-unnamed.qml
diff --git a/tests/auto/qml/qqmlconnections/data/singletontype-target.qml b/tests/auto/qml/qqmlconnections/data/bindings/singletontype-target.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/singletontype-target.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/singletontype-target.qml
diff --git a/tests/auto/qml/qqmlconnections/data/test-connection-implicit.qml b/tests/auto/qml/qqmlconnections/data/bindings/test-connection-implicit.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/test-connection-implicit.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/test-connection-implicit.qml
diff --git a/tests/auto/qml/qqmlconnections/data/test-connection.qml b/tests/auto/qml/qqmlconnections/data/bindings/test-connection.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/test-connection.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/test-connection.qml
diff --git a/tests/auto/qml/qqmlconnections/data/trimming.qml b/tests/auto/qml/qqmlconnections/data/bindings/trimming.qml
similarity index 100%
rename from tests/auto/qml/qqmlconnections/data/trimming.qml
rename to tests/auto/qml/qqmlconnections/data/bindings/trimming.qml
diff --git a/tests/auto/qml/qqmlconnections/data/functions/connection-no-signal-name.qml b/tests/auto/qml/qqmlconnections/data/functions/connection-no-signal-name.qml
new file mode 100644
index 0000000000..04cc36b3c5
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/connection-no-signal-name.qml
@@ -0,0 +1,15 @@
+import QtQuick 2.4
+
+Item {
+    id: blaBlaBla
+    function hint() {
+    }
+
+    Connections {
+        //target: blaBlaBla
+        // function onHint() { hint() };
+        on: true
+    }
+}
+
+
diff --git a/tests/auto/qml/qqmlconnections/data/functions/connection-targetchange.qml b/tests/auto/qml/qqmlconnections/data/functions/connection-targetchange.qml
new file mode 100644
index 0000000000..692194e837
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/connection-targetchange.qml
@@ -0,0 +1,25 @@
+import QtQuick 2.0
+
+Item {
+    Component {
+        id: item1
+        Item {
+            objectName: "item1"
+        }
+    }
+    Component {
+        id: item2
+        Item {
+            objectName: "item2"
+        }
+    }
+    Loader {
+        id: loader
+        sourceComponent: item1
+    }
+    Connections {
+        objectName: "connections"
+        target: loader.item
+        function onWidthChanged() { loader.sourceComponent = item2 }
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-ignored.qml b/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-ignored.qml
new file mode 100644
index 0000000000..f70d8cdb15
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-ignored.qml
@@ -0,0 +1,17 @@
+import QtQml 2.0
+
+QtObject {
+    id: root
+
+    property Connections c1: Connections {
+        target: root;
+        function onNotFooBar1() {}
+        ignoreUnknownSignals: true
+    }
+
+    property Connections c2: Connections {
+        objectName: "connections"
+        function onNotFooBar2() {}
+        ignoreUnknownSignals: true
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-notarget.qml b/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-notarget.qml
new file mode 100644
index 0000000000..7658728dd9
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-notarget.qml
@@ -0,0 +1,9 @@
+import QtQml 2.0
+
+QtObject {
+    property Connections c1: Connections {
+        objectName: "connections"
+        target: null
+        function onNotFooBar() {}
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-parent.qml b/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-parent.qml
new file mode 100644
index 0000000000..ece76b0cf7
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals-parent.qml
@@ -0,0 +1,8 @@
+import QtQml 2.0
+
+QtObject {
+    property Connections c1: Connections {
+        objectName: "connections"
+        function onFooBar() {}
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals.qml b/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals.qml
new file mode 100644
index 0000000000..a198a724d0
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/connection-unknownsignals.qml
@@ -0,0 +1,11 @@
+import QtQml 2.0
+
+QtObject {
+    id: screen
+
+    property Connections c1: Connections {
+        objectName: "connections"
+        target: screen
+        function onFooBar() {}
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/disabled-at-start.qml b/tests/auto/qml/qqmlconnections/data/functions/disabled-at-start.qml
new file mode 100644
index 0000000000..981437fe8c
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/disabled-at-start.qml
@@ -0,0 +1,14 @@
+import QtQuick 2.9
+
+Item {
+    id: root
+
+    property bool tested: false
+    signal testMe()
+
+    Connections {
+        target: root
+        enabled: false
+        function onTestMe() { root.tested = true; }
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/override-proxy-type.qml b/tests/auto/qml/qqmlconnections/data/functions/override-proxy-type.qml
new file mode 100644
index 0000000000..b83f0baa11
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/override-proxy-type.qml
@@ -0,0 +1,13 @@
+import QtQml 2.12
+import test.proxy 1.0
+
+Proxy {
+    property int testEnum: 0;
+    id: proxy
+    property Connections connections: Connections {
+        target: proxy
+        function onSomeSignal() { testEnum = Proxy.EnumValue }
+    }
+
+    Component.onCompleted: someSignal()
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/rewriteError-global.qml b/tests/auto/qml/qqmlconnections/data/functions/rewriteError-global.qml
new file mode 100644
index 0000000000..de3154c431
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/rewriteError-global.qml
@@ -0,0 +1,8 @@
+import QtQml 2.0
+import Test 1.0
+
+TestObject {
+    property QtObject connection: Connections {
+        function onSignalWithGlobalName() { ran = true }
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/rewriteError-unnamed.qml b/tests/auto/qml/qqmlconnections/data/functions/rewriteError-unnamed.qml
new file mode 100644
index 0000000000..fa1d1b17d7
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/rewriteError-unnamed.qml
@@ -0,0 +1,8 @@
+import QtQuick 2.0
+import Test 1.0
+
+TestObject {
+    property QtObject connection: Connections {
+        function onUnnamedArgumentSignal() { ran = true }
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/singletontype-target.qml b/tests/auto/qml/qqmlconnections/data/functions/singletontype-target.qml
new file mode 100644
index 0000000000..935b610351
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/singletontype-target.qml
@@ -0,0 +1,22 @@
+import QtQml 2.0
+import MyTestSingletonType 1.0 as MyTestSingletonType
+
+QtObject {
+    id: rootObject
+    objectName: "rootObject"
+    property int newIntPropValue: 12
+
+    property int moduleIntPropChangedCount: 0
+    property int moduleOtherSignalCount: 0
+
+    function setModuleIntProp() {
+        MyTestSingletonType.Api.intProp = newIntPropValue;
+        newIntPropValue = newIntPropValue + 1;
+    }
+
+    property Connections c: Connections {
+        target: MyTestSingletonType.Api
+        function onIntPropChanged() { moduleIntPropChangedCount = moduleIntPropChangedCount + 1 }
+        function onOtherSignal() { moduleOtherSignalCount = moduleOtherSignalCount + 1 }
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/test-connection-implicit.qml b/tests/auto/qml/qqmlconnections/data/functions/test-connection-implicit.qml
new file mode 100644
index 0000000000..2ed5278636
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/test-connection-implicit.qml
@@ -0,0 +1,9 @@
+import QtQuick 2.0
+
+Item {
+    width: 50
+
+    property bool tested: false
+
+    Connections { function onWidthChanged() { tested = true } }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/test-connection.qml b/tests/auto/qml/qqmlconnections/data/functions/test-connection.qml
new file mode 100644
index 0000000000..c706797ea4
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/test-connection.qml
@@ -0,0 +1,14 @@
+import QtQuick 2.0
+
+Item {
+    id: screen; width: 50
+
+    property bool tested: false
+    signal testMe
+
+    Connections {
+        objectName: "connections"
+        target: screen;
+        function onWidthChanged() { screen.tested = true }
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/data/functions/trimming.qml b/tests/auto/qml/qqmlconnections/data/functions/trimming.qml
new file mode 100644
index 0000000000..7dfd673539
--- /dev/null
+++ b/tests/auto/qml/qqmlconnections/data/functions/trimming.qml
@@ -0,0 +1,13 @@
+import QtQml 2.0
+
+QtObject {
+    id: root
+
+    property string tested
+    signal testMe(int param1, string param2)
+
+    property Connections c: Connections {
+        target: root
+        function onTestMe(param1, param2) { root.tested = param2 + param1 }
+    }
+}
diff --git a/tests/auto/qml/qqmlconnections/tst_qqmlconnections.cpp b/tests/auto/qml/qqmlconnections/tst_qqmlconnections.cpp
index dc29363fcf..f82787f61a 100644
--- a/tests/auto/qml/qqmlconnections/tst_qqmlconnections.cpp
+++ b/tests/auto/qml/qqmlconnections/tst_qqmlconnections.cpp
@@ -42,29 +42,57 @@ public:
 private slots:
     void defaultValues();
     void properties();
+
+    void connection_data() { prefixes(); }
     void connection();
+
+    void trimming_data() { prefixes(); }
     void trimming();
+
+    void targetChanged_data() { prefixes(); };
     void targetChanged();
+
     void unknownSignals_data();
     void unknownSignals();
+
     void errors_data();
     void errors();
+
+    void rewriteErrors_data() { prefixes(); }
     void rewriteErrors();
+
+    void singletonTypeTarget_data() { prefixes(); }
     void singletonTypeTarget();
+
+    void enableDisable_QTBUG_36350_data() { prefixes(); }
     void enableDisable_QTBUG_36350();
+
+    void disabledAtStart_data() { prefixes(); }
     void disabledAtStart();
+
+    void clearImplicitTarget_data() { prefixes(); }
     void clearImplicitTarget();
     void onWithoutASignal();
+
+    void noAcceleratedGlobalLookup_data() { prefixes(); }
     void noAcceleratedGlobalLookup();
 
 private:
     QQmlEngine engine;
+    void prefixes();
 };
 
 tst_qqmlconnections::tst_qqmlconnections()
 {
 }
 
+void tst_qqmlconnections::prefixes()
+{
+    QTest::addColumn<QString>("prefix");
+    QTest::newRow("functions") << QString("functions");
+    QTest::newRow("bindings") << QString("bindings");
+}
+
 void tst_qqmlconnections::defaultValues()
 {
     QQmlEngine engine;
@@ -93,8 +121,9 @@ void tst_qqmlconnections::properties()
 
 void tst_qqmlconnections::connection()
 {
+    QFETCH(QString, prefix);
     QQmlEngine engine;
-    QQmlComponent c(&engine, testFileUrl("test-connection.qml"));
+    QQmlComponent c(&engine, testFileUrl(prefix + "/test-connection.qml"));
     QQuickItem *item = qobject_cast<QQuickItem*>(c.create());
 
     QVERIFY(item != nullptr);
@@ -110,8 +139,9 @@ void tst_qqmlconnections::connection()
 
 void tst_qqmlconnections::trimming()
 {
+    QFETCH(QString, prefix);
     QQmlEngine engine;
-    QQmlComponent c(&engine, testFileUrl("trimming.qml"));
+    QQmlComponent c(&engine, testFileUrl(prefix + "/trimming.qml"));
     QObject *object = c.create();
 
     QVERIFY(object != nullptr);
@@ -131,8 +161,9 @@ void tst_qqmlconnections::trimming()
 // Confirm that target can be changed by one of our signal handlers
 void tst_qqmlconnections::targetChanged()
 {
+    QFETCH(QString, prefix);
     QQmlEngine engine;
-    QQmlComponent c(&engine, testFileUrl("connection-targetchange.qml"));
+    QQmlComponent c(&engine, testFileUrl(prefix + "/connection-targetchange.qml"));
     QQuickItem *item = qobject_cast<QQuickItem*>(c.create());
     QVERIFY(item != nullptr);
 
@@ -158,10 +189,15 @@ void tst_qqmlconnections::unknownSignals_data()
     QTest::addColumn<QString>("file");
     QTest::addColumn<QString>("error");
 
-    QTest::newRow("basic") << "connection-unknownsignals.qml" << ":6:30: QML Connections: Cannot assign to non-existent property \"onFooBar\"";
-    QTest::newRow("parent") << "connection-unknownsignals-parent.qml" << ":4:30: QML Connections: Cannot assign to non-existent property \"onFooBar\"";
-    QTest::newRow("ignored") << "connection-unknownsignals-ignored.qml" << ""; // should be NO error
-    QTest::newRow("notarget") << "connection-unknownsignals-notarget.qml" << ""; // should be NO error
+    QTest::newRow("functions/basic")    << "functions/connection-unknownsignals.qml" << ":6:30: QML Connections: Detected function \"onFooBar\" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.";
+    QTest::newRow("functions/parent")   << "functions/connection-unknownsignals-parent.qml" << ":4:30: QML Connections: Detected function \"onFooBar\" in Connections element. This is probably intended to be a signal handler but no signal of the target matches the name.";
+    QTest::newRow("functions/ignored")  << "functions/connection-unknownsignals-ignored.qml" << ""; // should be NO error
+    QTest::newRow("functions/notarget") << "functions/connection-unknownsignals-notarget.qml" << ""; // should be NO error
+
+    QTest::newRow("bindings/basic")    << "bindings/connection-unknownsignals.qml" << ":6:30: QML Connections: Cannot assign to non-existent property \"onFooBar\"";
+    QTest::newRow("bindings/parent")   << "bindings/connection-unknownsignals-parent.qml" << ":4:30: QML Connections: Cannot assign to non-existent property \"onFooBar\"";
+    QTest::newRow("bindings/ignored")  << "bindings/connection-unknownsignals-ignored.qml" << ""; // should be NO error
+    QTest::newRow("bindings/notarget") << "bindings/connection-unknownsignals-notarget.qml" << ""; // should be NO error
 }
 
 void tst_qqmlconnections::unknownSignals()
@@ -239,10 +275,11 @@ private:
 
 void tst_qqmlconnections::rewriteErrors()
 {
+    QFETCH(QString, prefix);
     qmlRegisterType<TestObject>("Test", 1, 0, "TestObject");
     {
         QQmlEngine engine;
-        QQmlComponent c(&engine, testFileUrl("rewriteError-unnamed.qml"));
+        QQmlComponent c(&engine, testFileUrl(prefix + "/rewriteError-unnamed.qml"));
         QTest::ignoreMessage(QtWarningMsg, (c.url().toString() + ":5:35: QML Connections: Signal uses unnamed parameter followed by named parameter.").toLatin1());
         TestObject *obj = qobject_cast<TestObject*>(c.create());
         QVERIFY(obj != nullptr);
@@ -254,7 +291,7 @@ void tst_qqmlconnections::rewriteErrors()
 
     {
         QQmlEngine engine;
-        QQmlComponent c(&engine, testFileUrl("rewriteError-global.qml"));
+        QQmlComponent c(&engine, testFileUrl(prefix + "/rewriteError-global.qml"));
         QTest::ignoreMessage(QtWarningMsg, (c.url().toString() + ":5:35: QML Connections: Signal parameter \"parseInt\" hides global variable.").toLatin1());
         TestObject *obj = qobject_cast<TestObject*>(c.create());
         QVERIFY(obj != nullptr);
@@ -305,8 +342,9 @@ static QObject *module_api_factory(QQmlEngine *engine, QJSEngine *scriptEngine)
 // QTBUG-20937
 void tst_qqmlconnections::singletonTypeTarget()
 {
+    QFETCH(QString, prefix);
     qmlRegisterSingletonType<MyTestSingletonType>("MyTestSingletonType", 1, 0, "Api", module_api_factory);
-    QQmlComponent component(&engine, testFileUrl("singletontype-target.qml"));
+    QQmlComponent component(&engine, testFileUrl(prefix + "/singletontype-target.qml"));
     QObject *object = component.create();
     QVERIFY(object != nullptr);
 
@@ -331,8 +369,9 @@ void tst_qqmlconnections::singletonTypeTarget()
 
 void tst_qqmlconnections::enableDisable_QTBUG_36350()
 {
+    QFETCH(QString, prefix);
     QQmlEngine engine;
-    QQmlComponent c(&engine, testFileUrl("test-connection.qml"));
+    QQmlComponent c(&engine, testFileUrl(prefix + "/test-connection.qml"));
     QQuickItem *item = qobject_cast<QQuickItem*>(c.create());
     QVERIFY(item != nullptr);
 
@@ -358,8 +397,9 @@ void tst_qqmlconnections::enableDisable_QTBUG_36350()
 
 void tst_qqmlconnections::disabledAtStart()
 {
+    QFETCH(QString, prefix);
     QQmlEngine engine;
-    QQmlComponent c(&engine, testFileUrl("disabled-at-start.qml"));
+    QQmlComponent c(&engine, testFileUrl(prefix + "/disabled-at-start.qml"));
     QObject * const object = c.create();
 
     QVERIFY(object != nullptr);
@@ -376,8 +416,9 @@ void tst_qqmlconnections::disabledAtStart()
 //QTBUG-56499
 void tst_qqmlconnections::clearImplicitTarget()
 {
+    QFETCH(QString, prefix);
     QQmlEngine engine;
-    QQmlComponent c(&engine, testFileUrl("test-connection-implicit.qml"));
+    QQmlComponent c(&engine, testFileUrl(prefix + "/test-connection-implicit.qml"));
     QQuickItem *item = qobject_cast<QQuickItem*>(c.create());
 
     QVERIFY(item != nullptr);
@@ -421,10 +462,11 @@ signals:
 
 void tst_qqmlconnections::noAcceleratedGlobalLookup()
 {
+    QFETCH(QString, prefix);
     qRegisterMetaType<Proxy::MyEnum>();
     qmlRegisterType<Proxy>("test.proxy", 1, 0, "Proxy");
     QQmlEngine engine;
-    QQmlComponent c(&engine, testFileUrl("override-proxy-type.qml"));
+    QQmlComponent c(&engine, testFileUrl(prefix + "/override-proxy-type.qml"));
     QVERIFY(c.isReady());
     QScopedPointer<QObject> object(c.create());
     const QVariant val = object->property("testEnum");
