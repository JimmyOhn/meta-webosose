#!/usr/bin/env python3

__DIST_UPDATE_VERSION__ = "1.0.1"
PACKAGE_FEED_URI = "@PACKAGE_FEED_URI@"
PACKAGE_FEED_BASE_PATH = "@PACKAGE_FEED_BASE_PATH@"
PACKAGE_DISTRO = "@PACKAGE_DISTRO@"
TRIMED_DISTRO_VERSION = "@TRIMED_DISTRO_VERSION@"

from collections import deque
from collections import defaultdict
import errno
import argparse
import subprocess
import os
import sys
import glob

def parse():
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--show-versions', help="Show All Fetchable versions", action="store_true", dest='show_all_versions')
    group.add_argument('--update', help="Update package list", action="store_true", dest='update')
    args = parser.parse_args()
    if len(sys.argv) <= 1:
        parser.print_help()
        exit(0)
    opkg = Opkg()
    if args.show_all_versions:
        opkg.show_all_versions = True
    elif args.update:
        opkg.update = True
    return opkg

def bash_cmd(cmd: str):
    proc = subprocess.Popen(cmd, shell=True, executable='/bin/bash', stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    ret = proc.communicate()
    if not proc.returncode:
        return (0,ret[0])
    else:
        return (proc.returncode,ret[1])

class Opkg():
    def __init__(self):
        self.feed_uri = self.getCorrectURI()
        self.support_version = self.getSupportVersions()
        self.sysconfdir = '/etc/opkg'
        self.installed_pkg_conf = self.getInstalledPkgConf(base_path=self.sysconfdir)
        self.show_all_versions = False
        self.update = False

    def getCorrectURI(self):
        return os.path.join(PACKAGE_FEED_URI,PACKAGE_FEED_BASE_PATH,PACKAGE_DISTRO)

    def getSupportVersions(self):
        print("fetch : %s" % self.feed_uri)
        ret = bash_cmd('curl -sL %s --list-only | egrep \'\[DIR\]\' | awk -F \'<a |</a>\' \'{print$2}\' | awk -F \'>\' \'{print$NF}\'' % (self.feed_uri))
        if ret[0] != 0:
            print('Error occured in curl : %s' % (ret[1]))
            exit(ret[0])
        dirs=ret[1].strip().split('\n')
        fetch_dirs=deque()
        for var in dirs:
            if (len(var) == 0) or not (var[0].isalpha()):
                fetch_dirs.append(var)
        del dirs
        return fetch_dirs
    
    def getInstalledPkgConf(self,base_path):
        pkg_feed_conf = defaultdict(bool)
        for i in glob.iglob(base_path+'/*.conf'):
            installed_conf_version=os.path.basename(i).rstrip('.conf')
            if not installed_conf_version[0].isdigit():
                continue
            if installed_conf_version+'/' in self.support_version:
                pkg_feed_conf[installed_conf_version]=True
        for i in self.support_version:
            if pkg_feed_conf[i[:-1]] == False:
                pkg_feed_conf[i[:-1]] = False
        return pkg_feed_conf

    def showAllVersions(self,isUpdate=False):
        self.installed_pkg_conf = self.getInstalledPkgConf(base_path=self.sysconfdir)
        for i in self.support_version:
            if self.installed_pkg_conf[i[:-1]] == True:
                print(f'{i[:-1]} [Installed]')
            else:
                print(f'{i[:-1]} [Not Installed]')
        if not isUpdate:
            exit(0)

    def Update(self):
        for k,v in self.installed_pkg_conf.items():
            if not v:
                os.chdir(self.sysconfdir)
                with open('%s.conf' % (k), 'w') as f:
                    os.fchmod(f.fileno(), 0o644)
                    f.write('src/gz %s \"%s\"' % (k, os.path.join(self.feed_uri,k)))
                    print('Add package feed version : %s' % (k))
        ret = bash_cmd('opkg update')
        print(ret[1])
        print("To upgrade platform latest distro version.\nrun '$ opkg upgrade'")

if __name__ == '__main__':
    opkg = parse()
    if opkg.show_all_versions:
        opkg.showAllVersions()
    elif opkg.update:
        opkg.showAllVersions(isUpdate=True)
        opkg.Update()